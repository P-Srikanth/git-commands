1. git init  -->  Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn.

2.git status  -->  Displays the state of the working directory and the staged snapshot. You�ll want to run this in conjunction with git add and git commit to see exactly what�s being included in the next snapshot.

3.git add  -->  Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history.

4.git branch  -->  This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository.

5.git remote  -->  A convenient tool for administering remote connections. Instead of passing the full URL to the fetch, pull, and push commands, it lets you use a more meaningful shortcut.

6.git commit  -->  Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users.

7.git push  -->  Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions.

8.git pull  -->  Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. This is the Git equivalent of svn update.

9.git merge  --> A powerful way to integrate changes from divergent branches. After forking the project history with git branch, git merge lets you put it back together again.

10.git rebase  --> Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore.

11.git rebase -i  -->  The -i flag is used to begin an interactive rebasing session. This provides all the benefits of a normal rebase, but gives you the opportunity to add, edit, or delete commits along the way.

12.git reset  -->  Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository.

13.git revert  -->  Undoes a committed snapshot. When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base.

14.git log  -->  Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots.

15.git fetch  -->  Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project.

16.git config  -->  A convenient way to set configuration options for your Git installation. You�ll typically only need to use this immediately after installing Git on a new development machine.

17.git clone  -->  Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository.

18.git checkout  -->  In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it�s a way to work on a particular line of development.

19.git clean  -->  Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files.

20.git stash  -->  The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy. 

21.git stash pop  -->  Popping your stash removes the changes from your stash and reapplies them to your working copy.

22.git stash apply  -->  You can reapply the changes to your working copy and keep them in your stash with git stash apply
